openapi: 3.0.0
info:
    title:  Template Service API
    version: 0.0.1
servers:
    -   url: "http://localhost:8001"
        description: "Local development server"
paths:
    /actuator/health:
        get:
            summary: Get health status
            tags:
                - Management
            operationId: getHealth
            responses:
                200:
                    description: get health status
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Health"
    /api/v1/books:
        get:
            summary: Get a list of books
            tags:
                - BookV1
            operationId: getBooks
            parameters:
                - $ref: "#/components/parameters/Limit"
                - $ref: "#/components/parameters/Offset"
            responses:
                200:
                    description: get list of books available
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/BooksResponse"
        post:
            summary: Add a new book
            tags:
                - BookV1
            operationId: createBook
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/BookCreateRequest"
            responses:
                200:
                    description: create a new book
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/BookItemResponse"
                400:
                    description: bad request, bad data

    /api/v1/books/{bookId}:
        get:
            summary: Get a book by id
            tags:
                - BookV1
            operationId: getBook
            parameters:
                -   name: bookId
                    in: path
                    required: true
                    schema:
                        type: integer
                        format: int64
            responses:
                200:
                    description: get one book based on item id
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/BookItemResponse"

    /api/v1/login/third-party:
        post:
            summary: Login with third party
            tags:
                - Auth
            operationId: loginWithThirdParty
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/LoginThirdPartyRequest"

            responses:
                200:
                    description: login successfully
                    content:
                        application/json:
                            schema:
                                type: string
                                description: JWT token

    /api/v1/login:
        post:
            summary: Login with account
            tags:
                - Auth
            operationId: loginWithAccount
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/LoginRequest"

            responses:
                200:
                    description: login successfully
                    content:
                        application/json:
                            schema:
                                type: string
                                description: JWT token


components:
    parameters:
        Limit:
            name: limit
            in: query
            description: the number of items to return
            schema:
                type: integer
                format: int32
                default: 20
        Offset:
            name: offset
            in: query
            description: the number of items to skip before starting to collect the result set
            schema:
                type: integer
                format: int32
                default: 0
    schemas:
        Health:
            type: object
            title: Health
            properties:
                status:
                    type: string
                    description: the status of the health


        BookCreateRequest:
            type: object
            title: BookCreateRequest
            required:
                - title
                - code
                - publisher
                - publicDate
            properties:
                title:
                    type: string
                    description: the id of the book
                code:
                    type: string
                    description: the code of the book
                publisher:
                    type: string
                    description: name of the publisher
                publicDate:
                    type: string
                    format: date
                    description: date of publication

        BookItemResponse:
            type: object
            title: BookItemResponse
            required:
                - bookId
                - code
            properties:
                bookId:
                    type: integer
                    format: int64
                    description: the id of the book
                code:
                    type: string
                    description: the code of the book
                title:
                    type: string
                    description: the id of the book
                publisher:
                    type: string
                    description: name of the publisher
                publicDate:
                    type: string
                    format: date
                    description: date of publication

        BooksResponse:
            type: object
            title: BooksResponse
            properties:
                books:
                    type: array
                    items:
                        $ref: "#/components/schemas/BookItemResponse"
                total:
                    type: integer
                    format: int32
                    description: the total number of books

        LoginThirdPartyRequest:
            type: object
            title: LoginThirdPartyRequest
            required:
                - provider
                - accessToken
            properties:
                provider:
                    type: string
                    enum: [FACEBOOK, GOOGLE]
                    description: third party
                accessToken:
                    type: string
                    description: access token of user with third party

        LoginRequest:
            type: object
            title: LoginRequest
            required:
                - email
                - password
            properties:
                email:
                    type: string
                    description: Email
                password:
                    type: string
                    description: Password